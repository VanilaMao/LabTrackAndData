<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:system="clr-namespace:System;assembly=mscorlib"
                    xmlns:attachProperties="clr-namespace:Lab.Theme.AttachProperties">
    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="ControlCommon.xaml"/>
    </ResourceDictionary.MergedDictionaries>
    <system:Double x:Key="Control.Opacity.Disabled">0.30</system:Double>
    <CornerRadius x:Key="Button.CornerRadius">4</CornerRadius>
    <CornerRadius x:Key="Button.CornerRadius.RightSide" BottomLeft="0" TopLeft="0" BottomRight="4" TopRight="4"/>

    <SolidColorBrush x:Key="Button.Primary">#288dc8</SolidColorBrush>
    <SolidColorBrush x:Key="Button.Success">#008A28</SolidColorBrush>
    <SolidColorBrush x:Key="Button.Info">#5BC0DE</SolidColorBrush>
    <SolidColorBrush x:Key="Button.Warning">#F0AD4E</SolidColorBrush>
    <SolidColorBrush x:Key="Button.Danger">#D60A23</SolidColorBrush>
    <SolidColorBrush x:Key="Button.Foreground.Filled">White</SolidColorBrush>
    <SolidColorBrush x:Key="Button.HoverVisual.Filled">Black</SolidColorBrush>

    <SolidColorBrush x:Key="Button.Foreground.Disabled">#d8d8d8</SolidColorBrush>
    <SolidColorBrush x:Key="Button.Border.Disabled">#efefef</SolidColorBrush>
    <SolidColorBrush x:Key="Button.Background.Disabled">Transparent</SolidColorBrush>

    <SolidColorBrush x:Key="Button.Foreground.Secondary">#666666</SolidColorBrush>
    <SolidColorBrush x:Key="Button.Border.Secondary">#d8d8d8</SolidColorBrush>
    <SolidColorBrush x:Key="Button.Background.Secondary">Transparent</SolidColorBrush>
    <SolidColorBrush x:Key="Button.HoverVisual.Secondary">#55000000</SolidColorBrush>

    <SolidColorBrush x:Key="Button.Foreground.Inverted">White</SolidColorBrush>
    <SolidColorBrush x:Key="Button.Border.Inverted">#99FFFFFF</SolidColorBrush>
    <SolidColorBrush x:Key="Button.Background.Inverted">Transparent</SolidColorBrush>
    <SolidColorBrush x:Key="Button.HoverVisual.Inverted">White</SolidColorBrush>

    <Style x:Key="ButtonBaseStyle" TargetType="{x:Type ButtonBase}">
        <Setter Property="Background" Value="{StaticResource Button.Background.Secondary}"/>
        <Setter Property="BorderBrush" Value="{StaticResource Button.Border.Secondary}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="FontSize" Value="12"/>
        <Setter Property="Foreground" Value="{StaticResource Button.Foreground.Secondary}"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Padding" Value="10,6"/>
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ButtonBase}">
                    <Grid x:Name="LayoutRoot">
                        <Border x:Name="BorderChrome" 
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                CornerRadius="{StaticResource Button.CornerRadius}"
                                Background="{TemplateBinding Background}">
                        </Border>
                        <Border x:Name="HoverVisual" 
                                CornerRadius="{StaticResource Button.CornerRadius}"
                                Background="Black"
                                BorderBrush="Transparent"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                Opacity="0"/>
                        <ContentPresenter ContentSource="Content"
                                          HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                          Margin="{TemplateBinding Padding}"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="LayoutRoot" Property="Opacity" Value="{StaticResource Control.Opacity.Disabled}"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="HoverVisual" Property="Opacity" Value="0.25"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="HoverVisual" Property="Opacity" Value="0.35"/>
                        </Trigger>
                        <Trigger Property="attachProperties:ThemeProperties.ButtonClass" Value="Primary">
                            <Setter TargetName="HoverVisual" Property="Background" Value="{StaticResource Button.HoverVisual.Filled}"/>
                        </Trigger>
                        <Trigger Property="attachProperties:ThemeProperties.ButtonClass" Value="Secondary">
                            <Setter TargetName="HoverVisual" Property="Background" Value="{StaticResource Button.HoverVisual.Secondary}"/>
                        </Trigger>
                        <Trigger Property="attachProperties:ThemeProperties.ButtonClass" Value="Inverted">
                            <Setter TargetName="HoverVisual" Property="Background" Value="{StaticResource Button.HoverVisual.Inverted}"/>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="attachProperties:ThemeProperties.ButtonClass" Value="Inverted"/>
                                <Condition Property="IsMouseOver" Value="True"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="HoverVisual" Property="Opacity" Value="0.7"/>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="attachProperties:ThemeProperties.ButtonClass" Value="Inverted"/>
                                <Condition Property="IsPressed" Value="True"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="HoverVisual" Property="Opacity" Value="1"/>
                        </MultiTrigger>
                        <Trigger Property="attachProperties:ThemeProperties.ButtonClass" Value="Success">
                            <Setter TargetName="HoverVisual" Property="Background" Value="{StaticResource Button.HoverVisual.Filled}"/>
                        </Trigger>
                        <Trigger Property="attachProperties:ThemeProperties.ButtonClass" Value="Info">
                            <Setter TargetName="HoverVisual" Property="Background" Value="{StaticResource Button.HoverVisual.Filled}"/>
                        </Trigger>
                        <Trigger Property="attachProperties:ThemeProperties.ButtonClass" Value="Warning">
                            <Setter TargetName="HoverVisual" Property="Background" Value="{StaticResource Button.HoverVisual.Filled}"/>
                        </Trigger>
                        <Trigger Property="attachProperties:ThemeProperties.ButtonClass" Value="Danger">
                            <Setter TargetName="HoverVisual" Property="Background" Value="{StaticResource Button.HoverVisual.Filled}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Background" Value="{StaticResource Button.Background.Disabled}"/>
                <Setter Property="BorderBrush" Value="{StaticResource Button.Border.Disabled}"/>
                <Setter Property="Foreground" Value="{StaticResource Button.Foreground.Disabled}"/>
            </Trigger>
            <Trigger Property="attachProperties:ThemeProperties.ButtonClass" Value="Primary">
                <Setter Property="Background" Value="{StaticResource Button.Primary}"/>
                <Setter Property="BorderBrush" Value="{StaticResource Button.Primary}"/>
                <Setter Property="BorderThickness" Value="0"/>
                <Setter Property="Foreground" Value="{StaticResource Button.Foreground.Filled}"/>
            </Trigger>
            <Trigger Property="attachProperties:ThemeProperties.ButtonClass" Value="Secondary">
                <Setter Property="Background" Value="{StaticResource Button.Background.Secondary}"/>
                <Setter Property="BorderBrush" Value="{StaticResource Button.Border.Secondary}"/>
                <Setter Property="BorderThickness" Value="1"/>
                <Setter Property="Foreground" Value="{StaticResource Button.Foreground.Secondary}"/>
            </Trigger>
            <Trigger Property="attachProperties:ThemeProperties.ButtonClass" Value="Inverted">
                <Setter Property="Background" Value="{StaticResource Button.Background.Inverted}"/>
                <Setter Property="BorderBrush" Value="{StaticResource Button.Border.Inverted}"/>
                <Setter Property="BorderThickness" Value="1"/>
                <Setter Property="Foreground" Value="{StaticResource Button.Foreground.Inverted}"/>
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="attachProperties:ThemeProperties.ButtonClass" Value="Inverted"/>
                    <Condition Property="IsMouseOver" Value="True"/>
                </MultiTrigger.Conditions>
                <Setter Property="Foreground" Value="{StaticResource Button.Primary}"/>
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="attachProperties:ThemeProperties.ButtonClass" Value="Inverted"/>
                    <Condition Property="IsPressed" Value="True"/>
                </MultiTrigger.Conditions>
                <Setter Property="Foreground" Value="{StaticResource Button.Primary}"/>
            </MultiTrigger>
            <Trigger Property="attachProperties:ThemeProperties.ButtonClass" Value="Success">
                <Setter Property="Background" Value="{StaticResource Button.Success}"/>
                <Setter Property="BorderBrush" Value="{StaticResource Button.Success}"/>
                <Setter Property="BorderThickness" Value="0"/>
                <Setter Property="Foreground" Value="{StaticResource Button.Foreground.Filled}"/>
            </Trigger>
            <Trigger Property="attachProperties:ThemeProperties.ButtonClass" Value="Info">
                <Setter Property="Background" Value="{StaticResource Button.Info}"/>
                <Setter Property="BorderBrush" Value="{StaticResource Button.Info}"/>
                <Setter Property="BorderThickness" Value="0"/>
                <Setter Property="Foreground" Value="{StaticResource Button.Foreground.Filled}"/>
            </Trigger>
            <Trigger Property="attachProperties:ThemeProperties.ButtonClass" Value="Warning">
                <Setter Property="Background" Value="{StaticResource Button.Warning}"/>
                <Setter Property="BorderBrush" Value="{StaticResource Button.Warning}"/>
                <Setter Property="BorderThickness" Value="0"/>
                <Setter Property="Foreground" Value="{StaticResource Button.Foreground.Filled}"/>
            </Trigger>
            <Trigger Property="attachProperties:ThemeProperties.ButtonClass" Value="Danger">
                <Setter Property="Background" Value="{StaticResource Button.Danger}"/>
                <Setter Property="BorderBrush" Value="{StaticResource Button.Danger}"/>
                <Setter Property="BorderThickness" Value="0"/>
                <Setter Property="Foreground" Value="{StaticResource Button.Foreground.Filled}"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="ToggleButtonBaseStyle" TargetType="{x:Type ToggleButton}" BasedOn="{StaticResource ButtonBaseStyle}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Grid x:Name="LayoutRoot">
                        <Border x:Name="BorderChrome" 
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                CornerRadius="{StaticResource Button.CornerRadius}"
                                Background="{TemplateBinding Background}">
                        </Border>
                        <Border x:Name="HoverVisual" 
                                CornerRadius="{StaticResource Button.CornerRadius}"
                                Background="Black"
                                BorderBrush="Transparent"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                Opacity="0"/>
                        <ContentPresenter ContentSource="Content"
                                          HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                          Margin="{TemplateBinding Padding}"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter TargetName="HoverVisual" Property="Opacity" Value="0.35"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="LayoutRoot" Property="Opacity" Value="{StaticResource Control.Opacity.Disabled}"/>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True"/>
                                <Condition Property="IsChecked" Value="False"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="HoverVisual" Property="Opacity" Value="0.25"/>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True"/>
                                <Condition Property="IsChecked" Value="True"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="HoverVisual" Property="Opacity" Value="0.45"/>
                        </MultiTrigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="HoverVisual" Property="Opacity" Value="0.35"/>
                        </Trigger>
                        <Trigger Property="attachProperties:ThemeProperties.ButtonClass" Value="Primary">
                            <Setter TargetName="HoverVisual" Property="Background" Value="{StaticResource Button.HoverVisual.Filled}"/>
                        </Trigger>
                        <Trigger Property="attachProperties:ThemeProperties.ButtonClass" Value="Secondary">
                            <Setter TargetName="HoverVisual" Property="Background" Value="{StaticResource Button.HoverVisual.Secondary}"/>
                        </Trigger>
                        <Trigger Property="attachProperties:ThemeProperties.ButtonClass" Value="Inverted">
                            <Setter TargetName="HoverVisual" Property="Background" Value="{StaticResource Button.HoverVisual.Inverted}"/>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="attachProperties:ThemeProperties.ButtonClass" Value="Inverted"/>
                                <Condition Property="IsMouseOver" Value="True"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="HoverVisual" Property="Opacity" Value="0.7"/>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="attachProperties:ThemeProperties.ButtonClass" Value="Inverted"/>
                                <Condition Property="IsPressed" Value="True"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="HoverVisual" Property="Opacity" Value="1"/>
                        </MultiTrigger>
                        <Trigger Property="attachProperties:ThemeProperties.ButtonClass" Value="Success">
                            <Setter TargetName="HoverVisual" Property="Background" Value="{StaticResource Button.HoverVisual.Filled}"/>
                        </Trigger>
                        <Trigger Property="attachProperties:ThemeProperties.ButtonClass" Value="Info">
                            <Setter TargetName="HoverVisual" Property="Background" Value="{StaticResource Button.HoverVisual.Filled}"/>
                        </Trigger>
                        <Trigger Property="attachProperties:ThemeProperties.ButtonClass" Value="Warning">
                            <Setter TargetName="HoverVisual" Property="Background" Value="{StaticResource Button.HoverVisual.Filled}"/>
                        </Trigger>
                        <Trigger Property="attachProperties:ThemeProperties.ButtonClass" Value="Danger">
                            <Setter TargetName="HoverVisual" Property="Background" Value="{StaticResource Button.HoverVisual.Filled}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="Button.Style" TargetType="{x:Type Button}" BasedOn="{StaticResource ButtonBaseStyle}">
        <Style.Triggers>
            <Trigger Property="IsDefault" Value="True">
                <Setter Property="attachProperties:ThemeProperties.ButtonClass" Value="Primary"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="ToggleButton.Style.Primary" TargetType="{x:Type ToggleButton}" BasedOn="{StaticResource ToggleButtonBaseStyle}">
        <Setter Property="attachProperties:ThemeProperties.ButtonClass" Value="Primary"/>
    </Style>

    <Style x:Key="ToggleButton.Style.Secondary" TargetType="{x:Type ToggleButton}" BasedOn="{StaticResource ToggleButtonBaseStyle}">
        <Setter Property="attachProperties:ThemeProperties.ButtonClass" Value="Secondary"/>
    </Style>

    <Style x:Key="ToggleButtonNoHoverOverStyle" TargetType="{x:Type ToggleButton}" BasedOn="{StaticResource ToggleButtonBaseStyle}">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Grid Background="{TemplateBinding Background}">
                        <ContentPresenter />
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


</ResourceDictionary>